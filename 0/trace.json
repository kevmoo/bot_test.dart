{"dependencies":[{"uri":"file:///usr/local/Cellar/dart-editor/25388/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn interface implemented by all stack trace objects.\n\nA [StackTrace] is intended to convey information to the user about the call\nsequence that triggered an exception.\n\nThese objects are created by the runtime, it is not possible to create\nthem programmatically.\n","uri":"file:///usr/local/Cellar/dart-editor/25388/dart-sdk/lib/core/stacktrace.dart","name":"StackTrace","id":"StackTrace","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a [String] representation of the stack trace.\n\nThe string represents the full stack trace starting from\nthe point where a throw ocurred to the top of the current call sequence.\n\nThe exact format of the string representation is not final.\n","name":"toString","id":"toString0()","line":"25","kind":"method"}],"line":"16","kind":"class"},{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25388/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","id":"0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"uri":"package:stack_trace/src/trace.dart","name":"package:stack_trace/src/trace.dart","id":"trace","children":[{"isFinal":true,"comment":"A RegExp to match this package's stack traces.","name":"_friendlyTrace","isPrivate":true,"id":"_friendlyTrace","line":"25","kind":"variable"},{"isFinal":true,"comment":"A RegExp to match Firefox's stack traces.\n\nFirefox's trace frames start with the name of the function in which the\nerror occurred, possibly including its parameters inside `()`. For example,\n`.VW.call$0(\"arg\")@http://pub.dartlang.org/stuff.dart.js:560`.","name":"_firefoxTrace","isPrivate":true,"id":"_firefoxTrace","line":"22","kind":"variable"},{"isFinal":true,"name":"_terseRegExp","isPrivate":true,"id":"_terseRegExp","line":"15","kind":"variable"},{"interfaces":[{"refId":"dart.core/StackTrace","name":"StackTrace"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A stack trace, comprised of a list of stack frames.","name":"Trace","id":"Trace","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Returns a human-readable representation of [stackTrace]. If [terse] is\nset, this folds together multiple stack frames from the Dart core\nlibraries, so that only the core library method directly called from user\ncode is visible (see [Trace.terse]).","name":"format","id":"format2()","children":[{"ref":{"refId":"dart.core/StackTrace","name":"StackTrace"},"name":"stackTrace","id":"stackTrace","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"terse","id":"terse","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"trace/Trace","name":"Trace"},"comment":"Returns a new [Trace] based on [this] where multiple stack frames matching\n[predicate] are folded together. This means that whenever there are\nmultiple frames in a row that match [predicate], only the last one is\nkept.\n\nThis is useful for limiting the amount of library code that appears in a\nstack trace by only showing user code and code that's called by user code.","name":"foldFrames","id":"foldFrames1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"predicate","id":"predicate","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///usr/local/Cellar/dart-editor/25388/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"package:stack_trace/src/trace.dart","name":"frame","id":"frame","line":"134","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"134","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns a human-readable string representation of [this].","name":"toString","id":"toString0()","line":"149","kind":"method"},{"ref":{"refId":"dart.core/StackTrace","name":"StackTrace"},"comment":"Returns a VM-style [StackTrace] object.\n\nThe return value's [toString] method will always return a string\nrepresentation in the Dart VM's stack trace format, regardless of what\nplatform is being used.","name":"vmTrace","id":"vmTrace","line":"112","kind":"property"},{"ref":{"refId":"trace/Trace","name":"Trace"},"comment":"Returns a terser version of [this].\n\nThis is accomplished by folding together multiple stack frames from the\ncore library, as in [foldFrames]. Remaining core library frames have their\nlibraries, \"-patch\" suffixes, and line numbers removed.","name":"terse","id":"terse","line":"119","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"frame/Frame","name":"Frame"}],"name":"List"},"isFinal":true,"comment":"The stack frames that comprise this stack trace.","name":"frames","id":"frames","line":"30","kind":"variable"},{"returnType":{"refId":"trace/Trace","name":"Trace"},"comment":"Returns the current stack trace.\n\nBy default, the first frame of this trace will be the line where\n[Trace.current] is called. If [level] is passed, the trace will start that\nmany frames up instead.","name":"current","id":"current1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"level","id":"level","kind":"param"}],"line":"47","kind":"constructor"},{"returnType":{"refId":"trace/Trace","name":"Trace"},"comment":"Returns a new stack trace containing the same data as [trace].\n\nIf [trace] is a native [StackTrace], its data will be parsed out; if it's\na [Trace], it will be returned as-is.","name":"from","id":"from1()","children":[{"ref":{"refId":"dart.core/StackTrace","name":"StackTrace"},"name":"trace","id":"trace","kind":"param"}],"line":"65","kind":"constructor"},{"returnType":{"refId":"trace/Trace","name":"Trace"},"comment":"Parses a string representation of a stack trace.\n\n[trace] should be formatted in the same way as a Dart VM or browser stack\ntrace.","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"trace","id":"trace","kind":"param"}],"line":"74","kind":"constructor"},{"comment":"Parses a string representation of a Dart VM stack trace.","name":"parseVM","id":"parseVM1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"trace","id":"trace","kind":"param"}],"line":"86","kind":"constructor"},{"comment":"Parses a string representation of a Chrome/V8 stack trace.","name":"parseV8","id":"parseV81()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"trace","id":"trace","kind":"param"}],"line":"90","kind":"constructor"},{"comment":"Parses a string representation of a Firefox stack trace.","name":"parseFirefox","id":"parseFirefox1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"trace","id":"trace","kind":"param"}],"line":"94","kind":"constructor"},{"comment":"Parses this package's a string representation of a stack trace.","name":"parseFriendly","id":"parseFriendly1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"trace","id":"trace","kind":"param"}],"line":"99","kind":"constructor"},{"comment":"Returns a new [Trace] comprised of [frames].","name":"","id":"1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"frame/Frame","name":"Frame"}],"name":"Iterable"},"name":"frames","id":"frames","kind":"param"}],"line":"104","kind":"constructor"}],"line":"28","kind":"class"}],"line":"5","kind":"library"}