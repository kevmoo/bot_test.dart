{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"file:///usr/local/Cellar/dart-editor/29341/dart-sdk/lib/core/object.dart","line":"21"}],"uri":"file:///usr/local/Cellar/dart-editor/29341/dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"package:unittest/matcher.dart","id":"matcher","comment":"\nSupport for specifying test expectations,\nsuch as for unit tests.\n\nThis library is included in the\n[unittest package on pub.dartlang.org]\n(http://pub.dartlang.org/packages/unittest).\nImport this library into your Dart code with:\n\n    import 'package:unittest/matcher.dart';\n\nThe matcher library provides a third-generation assertion mechanism, drawing\ninspiration from [Hamcrest](http://code.google.com/p/hamcrest/).\nFor more information, see\n[Unit Testing with Dart]\n(http://www.dartlang.org/articles/dart-unit-tests/).\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"FailureHandler","id":"FailureHandler","comment":"\nFailed matches are reported using a default IFailureHandler.\nThe default implementation simply throws [TestFailure]s;\nthis can be replaced by some other implementation of\nIFailureHandler by calling configureExpectHandler.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fail","id":"fail1()","comment":"This handles failures given a textual decription ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"}],"line":"91"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"failMatch","id":"failMatch5()","comment":"\nThis handles failures given the actual [value], the [matcher]\nthe [reason] (argument from [expect]), some additonal [matchState]\ngenerated by the [matcher], and a verbose flag which controls in\nsome cases how much [matchState] information is used. It will use\nthese to create a detailed error message (typically by calling\nan [ErrorFormatter]) and then call [fail] with this message.\n","children":[{"kind":"param","name":"actual","id":"actual"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"kind":"param","name":"matcher","id":"matcher"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"102"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"102"}],"line":"101"}],"uri":"package:unittest/src/interfaces.dart","line":"89"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"FailureHandler","refId":"matcher/FailureHandler"}],"kind":"class","name":"DefaultFailureHandler","id":"DefaultFailureHandler","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fail","id":"fail1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"}],"line":"112"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"failMatch","id":"failMatch5()","children":[{"kind":"param","name":"actual","id":"actual"},{"ref":{"name":"Matcher","refId":"matcher/Matcher"},"kind":"param","name":"matcher","id":"matcher"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"116"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"116"}],"line":"115"},{"kind":"constructor","name":"","id":"0()","line":"107"}],"uri":"package:unittest/src/expect.dart","line":"106"}],"uri":"package:unittest/matcher.dart","line":"21"}],"kind":"library","name":"package:unittest/unittest.dart","id":"unittest","comment":"\nSupport for writing Dart unit tests.\n\nFor information on installing and importing this library, see the\n[unittest package on pub.dartlang.org]\n(http://pub.dartlang.org/packages/unittest).\n\n**See also:**\n[Unit Testing with Dart]\n(http://www.dartlang.org/articles/dart-unit-tests/)\n\n##Concepts\n\n * __Tests__: Tests are specified via the top-level function [test], they can be\n   organized together using [group].\n\n * __Checks__: Test expectations can be specified via [expect]\n\n * __Matchers__: [expect] assertions are written declaratively using the\n   [Matcher] class.\n\n * __Configuration__: The framework can be adapted by setting\n   [unittestConfiguration] with a [Configuration]. See the other libraries\n   in the `unittest` package for alternative implementations of\n   [Configuration] including `compact_vm_config.dart`, `html_config.dart` and\n   `html_enhanced_config.dart`.\n\n##Examples\n\nA trivial test:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n      test('this is another test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests, grouped by category:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      group('group A', () {\n        test('test A.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n        test('test A.2', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n      group('group B', () {\n        test('this B.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n    }\n\nAsynchronous tests: if callbacks expect between 0 and 2 positional arguments,\ndepending on the suffix of expectAsyncX(). expectAsyncX() will wrap a\nfunction into a new callback and will not consider the test complete until\nthat callback is run. A count argument can be provided to specify the number\nof times the callback should be called (the default is 1).\n\n    import 'package:unittest/unittest.dart';\n    import 'dart:isolate';\n    main() {\n      test('callback is executed once', () {\n        // wrap the callback of an asynchronous call with [expectAsync0] if\n        // the callback takes 0 arguments...\n        var timer = Timer.run(expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }));\n      });\n\n      test('callback is executed twice', () {\n        var callback = expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }, count: 2); // <-- we can indicate multiplicity to [expectAsync0]\n        Timer.run(callback);\n        Timer.run(callback);\n      });\n    }\n\nexpectAsyncX() will wrap the callback code in a try/catch handler to handle\nexceptions (treated as test failures). There may be times when the number of\ntimes a callback should be called is non-deterministic. In this case a dummy\ncallback can be created with expectAsync0((){}) and this can be called from\nthe real callback when it is finally complete. In this case the body of the\ncallback should be protected within a call to guardAsync(); this will ensure\nthat exceptions are properly handled.\n\nA variation on this is expectAsyncUntilX(), which takes a callback as the\nfirst parameter and a predicate function as the second parameter; after each\ntime * the callback is called, the predicate function will be called; if it\nreturns false the test will still be considered incomplete.\n\nTest functions can return [Future]s, which provide another way of doing\nasynchronous tests. The test framework will handle exceptions thrown by\nthe Future, and will advance to the next test when the Future is complete.\nIt is still important to use expectAsync/guardAsync with any parts of the\ntest that may be invoked from a top level context (for example, with\nTimer.run()], as the Future exception handler may not capture exceptions\nin such code.\n\nNote: Due to some language limitations we have to use different functions\ndepending on the number of positional arguments of the callback. In the\nfuture, we plan to expose a single `expectAsync` function that can be used\nregardless of the number of positional arguments. This requires new langauge\nfeatures or fixes to the current spec (e.g. see\n[Issue 2706](http://dartbug.com/2706)).\n","children":[{"returnType":{"name":"Trace","refId":"trace/Trace"},"kind":"method","name":"_getTrace","id":"_getTrace1()","comment":"\nReturns a Trace object from a StackTrace object or a String, or the\nunchanged input if formatStacks is false;\n","children":[{"kind":"param","name":"stack","id":"stack"}],"isPrivate":true,"line":"862"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"disableTest","id":"disableTest1()","comment":"Disable a test by ID. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"testId","id":"testId"}],"line":"839"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"enableTest","id":"enableTest1()","comment":"Enable a test by ID. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"testId","id":"testId"}],"line":"836"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_setTestEnabledState","id":"_setTestEnabledState2()","comment":"Enable/disable a test by ID. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"testId","id":"testId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"state","id":"state"}],"isPrivate":true,"line":"821"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setSoloTest","id":"setSoloTest1()","comment":"Select a solo test by ID. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"id","id":"id"}],"line":"817"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_ensureInitialized","id":"_ensureInitialized1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"configAutoStart","id":"configAutoStart"}],"isPrivate":true,"line":"797"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"ensureInitialized","id":"ensureInitialized0()","comment":"\nLazily initializes the test library if not already initialized.\n","line":"793"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_fullSpec","id":"_fullSpec1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"spec","id":"spec"}],"isPrivate":true,"line":"784"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_completeTests","id":"_completeTests0()","comment":"Publish results on the page and notify controller. ","isPrivate":true,"line":"765"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_runTest","id":"_runTest0()","comment":"\nRuns the next test.\n","isPrivate":true,"line":"732"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_registerException","id":"_registerException3()","comment":"\nRegisters that an exception was caught for the current test.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"},{"kind":"param","name":"e","id":"e"},{"isOptional":true,"kind":"param","name":"trace","id":"trace"}],"isPrivate":true,"line":"720"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"registerException","id":"registerException2()","comment":"\nRegisters that an exception was caught for the current test.\n","children":[{"kind":"param","name":"e","id":"e"},{"isOptional":true,"kind":"param","name":"trace","id":"trace"}],"line":"713"},{"kind":"method","name":"_guardAsync","id":"_guardAsync3()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"tryBody","id":"tryBody"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"finallyBody","id":"finallyBody"},{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"isPrivate":true,"line":"699"},{"kind":"method","name":"guardAsync","id":"guardAsync1()","comment":"\nRun [tryBody] guarded in a try-catch block. If an exception is thrown, it is\npassed to the corresponding test.\n\nThe value returned by [tryBody] (if any) is returned by [guardAsync].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"tryBody","id":"tryBody"}],"line":"695"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"runTests","id":"runTests0()","comment":"Runs all queued tests, one at a time. ","line":"682"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"filterTests","id":"filterTests1()","comment":"\nFilter the tests. [testFilter] can be a [RegExp], a [String] or a\npredicate function. This is different to enabling/disabling tests\nin that it removes the tests completely.\n","children":[{"kind":"param","name":"testFilter","id":"testFilter"}],"line":"668"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"rerunTests","id":"rerunTests0()","line":"657"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"handleExternalError","id":"handleExternalError3()","comment":"Handle errors that happen outside the tests. ","children":[{"kind":"param","name":"e","id":"e"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"isOptional":true,"kind":"param","name":"stack","id":"stack"}],"line":"647"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_nextTestCase","id":"_nextTestCase0()","comment":"Advance to the next test case. ","isPrivate":true,"line":"639"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"tearDown","id":"tearDown1()","comment":"\nRegister a [tearDown] function for a test [group]. This function will\nbe called after each test in the group is run. Note that if groups\nare nested only the most locally scoped [teardownTest] function will be run.\n[setUp] and [tearDown] should be called within the [group] before any\ncalls to [test]. The [teardownTest] function can be asynchronous; in this\ncase it must return a [Future].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"teardownTest","id":"teardownTest"}],"line":"634"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setUp","id":"setUp1()","comment":"\nRegister a [setUp] function for a test [group]. This function will\nbe called before each test in the group is run.\n[setUp] and [tearDown] should be called within the [group] before any\ncalls to [test]. The [setupTest] function can be asynchronous; in this\ncase it must return a [Future].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"setupTest","id":"setupTest"}],"line":"622"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"solo_group","id":"solo_group2()","comment":"Like [solo_test], but for groups. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"description","id":"description"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"body","id":"body","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/29341/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"600"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"skip_group","id":"skip_group2()","comment":"Like [skip_test], but for groups. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"description","id":"description"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"body","id":"body","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/29341/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"597"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"group","id":"group2()","comment":"\nCreates a new named group of tests. Calls to group() or test() within the\nbody of the function passed to this will inherit this group's description.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"description","id":"description"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"body","id":"body","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"file:///usr/local/Cellar/dart-editor/29341/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"582"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"protectAsync2","id":"protectAsync22()","comment":"\nLike [protectAsync0] but [callback] should take 2 positional arguments.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id"}],"line":"574"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"protectAsync1","id":"protectAsync12()","comment":"\nLike [protectAsync0] but [callback] should take 1 positional argument.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id"}],"line":"566"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"protectAsync0","id":"protectAsync02()","comment":"\nWraps the [callback] in a new function and returns that function. The new\nfunction will be able to handle exceptions by directing them to the correct\ntest. This is thus similar to expectAsync0. Use it to wrap any callbacks that\nmight optionally be called but may never be called during the test.\n[callback] should take 0 positional arguments (named arguments are not\nsupported). [id] can be used to identify the callback in error\nmessages (for example if it is called after the test case is complete).\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id"}],"line":"558"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"expectAsyncUntil2","id":"expectAsyncUntil23()","comment":"\nLike [expectAsyncUntil0] but [callback] should take 2 positional arguments.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"isDone","id":"isDone"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id"}],"line":"544"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"expectAsyncUntil1","id":"expectAsyncUntil13()","comment":"\nLike [expectAsyncUntil0] but [callback] should take 1 positional argument.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"isDone","id":"isDone"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id"}],"line":"536"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"expectAsyncUntil0","id":"expectAsyncUntil03()","comment":"\nIndicate that [callback] is expected to be called until [isDone] returns\ntrue. The unittest framework check [isDone] after each callback and only\nwhen it returns true will it continue with the following test. Using\n[expectAsyncUntil0] will also ensure that errors that occur within\n[callback] are tracked and reported. [callback] should take 0 positional\narguments (named arguments are not supported). [id] can be used to\nidentify the callback in error messages (for example if it is called\nafter the test case is complete).\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"isDone","id":"isDone"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id"}],"line":"528"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"expectAsync2","id":"expectAsync24()","comment":"Like [expectAsync0] but [callback] should take 2 positional arguments. ","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"isNamed":true,"kind":"param","name":"count","id":"count","line":"513"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"max","id":"max","line":"513"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id","line":"513"}],"line":"512"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"expectAsync1","id":"expectAsync14()","comment":"Like [expectAsync0] but [callback] should take 1 positional argument. ","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"isNamed":true,"kind":"param","name":"count","id":"count","line":"506"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"max","id":"max","line":"506"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id","line":"506"}],"line":"505"},{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"expectAsync0","id":"expectAsync04()","comment":"\nIndicate that [callback] is expected to be called a [count] number of times\n(by default 1). The unittest framework will wait for the callback to run the\nspecified [count] times before it continues with the following test.  Using\n[expectAsync0] will also ensure that errors that occur within [callback] are\ntracked and reported. [callback] should take 0 positional arguments (named\narguments are not supported). [id] can be used to provide more\ndescriptive error messages if the callback is called more often than\nexpected. [max] can be used to specify an upper bound on the number of\ncalls; if this is exceeded the test will fail (or be marked as in error if\nit was already complete). A value of 0 for [max] (the default) will set\nthe upper bound to the same value as [count]; i.e. the callback should be\ncalled exactly [count] times. A value of -1 for [max] will mean no upper\nbound.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"isNamed":true,"kind":"param","name":"count","id":"count","line":"499"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"max","id":"max","line":"499"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"id","id":"id","line":"499"}],"line":"498"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"solo_test","id":"solo_test2()","comment":"\nCreates a new test case with the given description and body. The\ndescription will include the descriptions of any surrounding group()\ncalls.\n\nIf we use [solo_test] (or [solo_group]) instead of test, then all non-solo\ntests will be disabled. Note that if we use [solo_group], all tests in\nthe group will be enabled, regardless of whether they use [test] or\n[solo_test], or whether they are in a nested [group] vs [solo_group]. Put\nanother way, if there are any calls to [solo_test] or [solo_group] in a test\nfile, all tests that are not inside a [solo_group] will be disabled unless\nthey are [solo_test]s.\n\n[skip_test] and [skip_group] take precedence over soloing, by virtue of the\nfact that they are effectively no-ops.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"spec","id":"spec"},{"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"kind":"param","name":"body","id":"body"}],"line":"340"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"skip_test","id":"skip_test2()","comment":"Convenience function for skipping a test. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"spec","id":"spec"},{"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"kind":"param","name":"body","id":"body"}],"line":"322"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"test","id":"test2()","comment":"\nCreates a new test case with the given description and body. The\ndescription will include the descriptions of any surrounding group()\ncalls.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"spec","id":"spec"},{"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"kind":"param","name":"body","id":"body"}],"line":"312"},{"returnType":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"method","name":"currentTestCase","id":"currentTestCase0()","comment":"[TestCase] currently being executed. ","line":"285"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"logMessage","id":"logMessage1()","comment":"\nCan be called by tests to log status. Tests should use this\ninstead of [print].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"}],"line":"184"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"unittestConfiguration=","id":"unittestConfiguration=1()","comment":"\nSets the [Configuration] used by the unittest library.\n\nThrows a [StateError] if there is an existing, incompatible value.\n","children":[{"ref":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"param","name":"value","id":"value"}],"line":"171"},{"returnType":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"method","name":"unittestConfiguration","id":"unittestConfiguration0()","comment":"\n[Configuration] used by the unittest library. Note that if a\nconfiguration has not been set, calling this getter will create\na default configuration.\n","line":"159"},{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"property","name":"currentTestCase","id":"currentTestCase","comment":"[TestCase] currently being executed. ","line":"285"},{"ref":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"property","name":"unittestConfiguration","id":"unittestConfiguration","comment":"\n[Configuration] used by the unittest library. Note that if a\nconfiguration has not been set, calling this getter will create\na default configuration.\n","line":"159"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"filterStacks","id":"filterStacks","comment":"\nA flag that controls whether we try to filter out irrelevant frames from\nthe stack trace. Requires formatStacks to be set.\n","line":"856"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"formatStacks","id":"formatStacks","comment":"\nA flag that controls whether we hide unittest and core library details in\nexception stacks.\n\nUseful to disable when debugging unittest or matcher customizations.\n","line":"850"},{"kind":"variable","name":"ERROR","id":"ERROR","line":"305"},{"kind":"variable","name":"FAIL","id":"FAIL","line":"304"},{"kind":"variable","name":"PASS","id":"PASS","comment":"Test case result strings. ","line":"303"},{"kind":"variable","name":"_lastBreath","id":"_lastBreath","comment":"Time since we last gave non-sync code a chance to be scheduled. ","isPrivate":true,"line":"296"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_uncaughtErrorMessage","id":"_uncaughtErrorMessage","isPrivate":true,"line":"293"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_initialized","id":"_initialized","comment":"Whether the framework is in an initialized state. ","isPrivate":true,"line":"291"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_currentTestCaseIndex","id":"_currentTestCaseIndex","isPrivate":true,"line":"282"},{"ref":{"name":"_GroupContext","refId":"unittest/_GroupContext"},"kind":"variable","name":"_currentContext","id":"_currentContext","isPrivate":true,"line":"280"},{"isFinal":true,"kind":"variable","name":"_rootContext","id":"_rootContext","isPrivate":true,"line":"279"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_soloTestSeen","id":"_soloTestSeen","isPrivate":true,"line":"208"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_soloNestingLevel","id":"_soloNestingLevel","comment":"\nThe set of tests to run can be restricted by using [solo_test] and\n[solo_group].\nAs groups can be nested we use a counter to keep track of the nest level\nof soloing, and a flag to tell if we have seen any solo tests.\n","isPrivate":true,"line":"207"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"BREATH_INTERVAL","id":"BREATH_INTERVAL","comment":"\nInterval (in msecs) after which synchronous tests will insert an async\ndelay to allow DOM or other updates.\n","line":"199"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"isFinal":true,"kind":"variable","name":"testCases","id":"testCases","comment":"Tests executed in this suite. ","line":"193"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"isFinal":true,"kind":"variable","name":"_testCases","id":"_testCases","isPrivate":true,"line":"190"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"groupSep","id":"groupSep","comment":"Separator used between group names and test names. ","line":"188"},{"ref":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"variable","name":"_config","id":"_config","isPrivate":true,"line":"152"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"TestCase","id":"TestCase","comment":"\nRepresents the state for an individual unit test.\n\nCreate by calling [test] or [solo_test].\n","children":[{"returnType":{"name":"Function","refId":"dart.core/Function"},"kind":"method","name":"_errorHandler","id":"_errorHandler1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"stage","id":"stage"}],"isPrivate":true,"line":"73"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"_run","id":"_run0()","comment":"\nPerform any associated [_setUp] function and run the test. Returns\na [Future] that can be used to schedule the next test. If the test runs\nto completion synchronously, or is disabled, null is returned, to\ntell unittest to schedule the next test immediately.\n","isPrivate":true,"line":"97"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_setResult","id":"_setResult3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"testResult","id":"testResult"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"messageText","id":"messageText"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"param","name":"stack","id":"stack"}],"isPrivate":true,"line":"136"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_complete","id":"_complete3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"testResult","id":"testResult"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"kind":"param","name":"messageText","id":"messageText"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stack","id":"stack","line":"150"}],"isPrivate":true,"line":"149"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"pass","id":"pass0()","line":"168"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fail","id":"fail2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"messageText","id":"messageText"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stack","id":"stack"}],"line":"172"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"error","id":"error2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"messageText","id":"messageText"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stack","id":"stack"}],"line":"184"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_markCallbackComplete","id":"_markCallbackComplete0()","isPrivate":true,"line":"188"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"194"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"message","id":"message","comment":"Error or failure message. ","line":"36"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"result","id":"result","comment":"\nOne of [PASS], [FAIL], [ERROR], or [null] if the test hasn't run yet.\n","line":"42"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"passed","id":"passed","comment":"Returns whether this test case passed. ","line":"45"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"property","name":"stackTrace","id":"stackTrace","comment":"Stack trace associated with this test, or [null] if it succeeded. ","line":"49"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"property","name":"startTime","id":"startTime","line":"55"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"property","name":"runningTime","id":"runningTime","line":"58"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isComplete","id":"isComplete","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"id","id":"id","comment":"Identifier for this test. ","line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"description","id":"description","comment":"A description of what the test is specifying. ","line":"17"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"variable","name":"setUp","id":"setUp","comment":"The setup function to call before the test, if any. ","line":"20"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"variable","name":"tearDown","id":"tearDown","comment":"The teardown function to call after the test, if any. ","line":"23"},{"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"kind":"variable","name":"testFunction","id":"testFunction","comment":"The body of the test case. ","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_callbackFunctionsOutstanding","id":"_callbackFunctionsOutstanding","comment":"\nRemaining number of callbacks functions that must reach a 'done' state\nto wait for before the test completes.\n","isPrivate":true,"line":"32"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_message","id":"_message","isPrivate":true,"line":"34"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_result","id":"_result","isPrivate":true,"line":"38"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"variable","name":"_stackTrace","id":"_stackTrace","isPrivate":true,"line":"47"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"currentGroup","id":"currentGroup","comment":"The group (or groups) under which this test is running. ","line":"52"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"variable","name":"_startTime","id":"_startTime","isPrivate":true,"line":"54"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"variable","name":"_runningTime","id":"_runningTime","isPrivate":true,"line":"57"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"enabled","id":"enabled","line":"60"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_doneTeardown","id":"_doneTeardown","isPrivate":true,"line":"62"},{"ref":{"name":"Completer","refId":"dart.async/Completer"},"kind":"variable","name":"_testComplete","id":"_testComplete","isPrivate":true,"line":"64"},{"kind":"constructor","name":"_internal","id":"_internal3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"id","refId":"unittest/TestCase/id"},"kind":"param","name":"id","id":"id"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"description","refId":"unittest/TestCase/description"},"kind":"param","name":"description","id":"description"},{"ref":{"name":"TestFunction","refId":"unittest/TestFunction"},"initializedField":{"name":"testFunction","refId":"unittest/TestCase/testFunction"},"kind":"param","name":"testFunction","id":"testFunction"}],"isPrivate":true,"line":"66"}],"uri":"package:unittest/src/test_case.dart","line":"12"},{"superclass":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"class","name":"SimpleConfiguration","id":"SimpleConfiguration","comment":"\nHooks to configure the unittest library for different platforms. This class\nimplements the API in a platform-independent way. Tests that want to take\nadvantage of the platform can create a subclass and override methods from\nthis class.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onInit","id":"onInit0()","line":"67"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestStart","id":"onTestStart1()","comment":"\nCalled when each test starts. Useful to show intermediate progress on\na test suite. Derived classes should call this first before their own\noverride code.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"81"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestResult","id":"onTestResult1()","comment":"\nCalled when each test is first completed. Useful to show intermediate\nprogress on a test suite. Derived classes should call this first\nbefore their own override code.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"91"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestResultChanged","id":"onTestResultChanged1()","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"123"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onLogMessage","id":"onLogMessage2()","comment":"\nHandles the logging of messages by a test case. The default in\nthis base configuration is to call print();\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"}],"line":"131"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onExpectFailure","id":"onExpectFailure1()","comment":"\nHandles failures from expect(). The default in\nthis base configuration is to throw an exception;\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"}],"line":"139"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatResult","id":"formatResult1()","comment":"\nFormat a test result.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"156"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onSummary","id":"onSummary5()","comment":"\nCalled with the result of all test cases. The default implementation prints\nthe result summary using the built-in [print] command. Browser tests\ncommonly override this to reformat the output.\n\nWhen [uncaughtError] is not null, it contains an error that occured outside\nof tests (e.g. setting up the test).\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"passed","id":"passed"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"failed","id":"failed"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"errors","id":"errors"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"kind":"param","name":"results","id":"results"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"uncaughtError","id":"uncaughtError","line":"184"}],"line":"183"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onDone","id":"onDone1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"success","id":"success"}],"line":"206"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_postMessage","id":"_postMessage1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"}],"isPrivate":true,"line":"218"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","comment":"\nSubclasses can override this with something useful for diagnostics.\nParticularly useful in cases where we have parent/child configurations\nsuch as layout tests.\n","line":"35"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"autoStart","id":"autoStart","line":"37"},{"ref":{"name":"ReceivePort","refId":"dart.isolate/ReceivePort"},"kind":"variable","name":"_receivePort","id":"_receivePort","isPrivate":true,"line":"28"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"throwOnTestFailures","id":"throwOnTestFailures","comment":"\nIf true (the default), throw an exception at the end if any tests failed.\n","line":"42"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"stopTestOnExpectFailure","id":"stopTestOnExpectFailure","comment":"\nIf true (the default), then tests will stop after the first failed\n[expect]. If false, failed [expect]s will not cause the test\nto stop (other exceptions will still terminate the test).\n","line":"49"},{"isFinal":true,"kind":"variable","name":"_testLogBuffer","id":"_testLogBuffer","isPrivate":true,"line":"53"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"variable","name":"timeout","id":"timeout","comment":"How long a [TestCase] can run before it is considered an error.\nA [timeout] value of [:null:] means that the limit is infinite.","line":"57"},{"kind":"constructor","name":"","id":"0()","comment":"\nThe constructor sets up a failure handler for [expect] that redirects\n[expect] failures to [onExpectFailure].\n","line":"63"}],"uri":"package:unittest/src/simple_configuration.dart","line":"25"},{"superclass":{"name":"DefaultFailureHandler","refId":"matcher/DefaultFailureHandler"},"kind":"class","name":"_ExpectFailureHandler","id":"_ExpectFailureHandler","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fail","id":"fail1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"}],"line":"14"},{"ref":{"name":"SimpleConfiguration","refId":"unittest/SimpleConfiguration"},"isFinal":true,"kind":"variable","name":"_config","id":"_config","isPrivate":true,"line":"10"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"SimpleConfiguration","refId":"unittest/SimpleConfiguration"},"initializedField":{"name":"_config","refId":"unittest/_ExpectFailureHandler/_config"},"kind":"param","name":"_config","id":"_config","isPrivate":true}],"line":"12"}],"isPrivate":true,"uri":"package:unittest/src/simple_configuration.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Configuration","id":"Configuration","comment":"\nDescribes the interface used by the unit test system for communicating the\nresults of a test run.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onInit","id":"onInit0()","comment":"\nCalled as soon as the unittest framework becomes initialized. This is done\neven before tests are added to the test framework. It might be used to\ndetermine/debug errors that occur before the test harness starts executing.\nIt is also used to tell the vm or browser that tests are going to be run\nasynchronously and that the process should wait until they are done.\n","line":"42"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onStart","id":"onStart0()","comment":"Called as soon as the unittest framework starts running. ","line":"45"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestStart","id":"onTestStart1()","comment":"\nCalled when each test starts. Useful to show intermediate progress on\na test suite.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"51"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestResult","id":"onTestResult1()","comment":"\nCalled when each test is first completed. Useful to show intermediate\nprogress on a test suite.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"57"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onTestResultChanged","id":"onTestResultChanged1()","comment":"\nCalled when an already completed test changes state. For example: a test\nthat was marked as passing may later be marked as being in error because\nit still had callbacks being invoked.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"}],"line":"64"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onLogMessage","id":"onLogMessage2()","comment":"\nHandles the logging of messages by a test case.\n","children":[{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"kind":"param","name":"testCase","id":"testCase"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"}],"line":"69"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onDone","id":"onDone1()","comment":"\nCalled when the unittest framework is done running. [success] indicates\nwhether all tests passed successfully.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"success","id":"success"}],"line":"75"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"onSummary","id":"onSummary5()","comment":"\nCalled with the result of all test cases. Browser tests commonly override\nthis to reformat the output.\n\nWhen [uncaughtError] is not null, it contains an error that occured outside\nof tests (e.g. setting up the test).\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"passed","id":"passed"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"failed","id":"failed"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"errors","id":"errors"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"TestCase","refId":"unittest/TestCase"}]},"kind":"param","name":"results","id":"results"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"uncaughtError","id":"uncaughtError","line":"85"}],"line":"84"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"autoStart","id":"autoStart","comment":"\nIf [true], tests are started automatically. Otherwise [runTests]\nmust be called explicitly after tests are set up.\n","line":"29"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"property","name":"timeout","id":"timeout","comment":"How long a [TestCase] can run before it is considered an error.\nA [timeout] value of [:null:] means that the limit is infinite.","line":"33"},{"returnType":{"name":"Configuration","refId":"unittest/Configuration"},"kind":"constructor","name":"","id":"0()","comment":"\nCreates an instance of [SimpleConfiguration].\n","line":"16"},{"kind":"constructor","name":"blank","id":"blank0()","comment":"\nCreates an [Configuration] instances that does nothing.\n\nFor use by subclasses which wish to implement only a subset of features.\n","line":"23"}],"uri":"package:unittest/src/configuration.dart","line":"11"},{"kind":"typedef","name":"TestFunction","id":"TestFunction","comment":"Signature for a test function. ","line":"842"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_SpreadArgsHelper","id":"_SpreadArgsHelper","comment":"Simulates spread arguments using named arguments. ","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_makeCallbackId","id":"_makeCallbackId2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"id","id":"id"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"}],"isPrivate":true,"line":"398"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"shouldCallBack","id":"shouldCallBack0()","line":"419"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"after","id":"after0()","line":"439"},{"kind":"method","name":"invoke0","id":"invoke00()","line":"451"},{"kind":"method","name":"invoke1","id":"invoke11()","children":[{"kind":"param","name":"arg1","id":"arg1"}],"line":"461"},{"kind":"method","name":"invoke2","id":"invoke22()","children":[{"kind":"param","name":"arg1","id":"arg1"},{"kind":"param","name":"arg2","id":"arg2"}],"line":"471"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isFinal":true,"kind":"variable","name":"callback","id":"callback","line":"364"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"minExpectedCalls","id":"minExpectedCalls","line":"365"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"maxExpectedCalls","id":"maxExpectedCalls","line":"366"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isFinal":true,"kind":"variable","name":"isDone","id":"isDone","line":"367"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"id","id":"id","line":"368"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"actualCalls","id":"actualCalls","line":"369"},{"ref":{"name":"TestCase","refId":"unittest/TestCase"},"isFinal":true,"kind":"variable","name":"testCase","id":"testCase","line":"370"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"complete","id":"complete","line":"371"},{"isStatic":true,"kind":"variable","name":"sentinel","id":"sentinel","line":"372"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"minExpected","id":"minExpected"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"maxExpected","id":"maxExpected"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"isDone","id":"isDone","line":"375"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"id","id":"id","line":"375"}],"line":"374"}],"isPrivate":true,"line":"363"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Sentinel","id":"_Sentinel","comment":"Sentinel value for [_SpreadArgsHelper]. ","children":[{"kind":"constructor","name":"","id":"0()","line":"357"}],"isPrivate":true,"line":"356"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_GroupContext","id":"_GroupContext","comment":"\nSetup and teardown functions for a group and its parents, the latter\nfor chaining.\n","children":[{"isSetter":true,"kind":"method","name":"testSetup=","id":"testSetup=1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"setup","id":"setup"}],"line":"227"},{"isSetter":true,"kind":"method","name":"testTeardown=","id":"testTeardown=1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"teardown","id":"teardown"}],"line":"250"},{"kind":"property","name":"testSetup","id":"testSetup","line":"223"},{"kind":"property","name":"parentSetup","id":"parentSetup","line":"225"},{"kind":"property","name":"testTeardown","id":"testTeardown","line":"246"},{"kind":"property","name":"parentTeardown","id":"parentTeardown","line":"248"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"fullName","id":"fullName","line":"266"},{"ref":{"name":"_GroupContext","refId":"unittest/_GroupContext"},"isFinal":true,"kind":"variable","name":"parent","id":"parent","line":"215"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_name","id":"_name","comment":"Description text of the current test group. ","isPrivate":true,"line":"218"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"variable","name":"_testSetup","id":"_testSetup","comment":"Setup function called before each test in a group. ","isPrivate":true,"line":"221"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"variable","name":"_testTeardown","id":"_testTeardown","comment":"Teardown function called after each test in a group. ","isPrivate":true,"line":"244"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"_GroupContext","refId":"unittest/_GroupContext"},"isOptional":true,"initializedField":{"name":"parent","refId":"unittest/_GroupContext/parent"},"kind":"param","name":"parent","id":"parent"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"initializedField":{"name":"_name","refId":"unittest/_GroupContext/_name"},"kind":"param","name":"_name","id":"_name","isPrivate":true}],"line":"270"}],"isPrivate":true,"line":"214"}],"uri":"package:unittest/unittest.dart","line":"136"}