{"dependencies":[{"uri":"file:///usr/local/Cellar/dart-editor/25388/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25388/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","id":"0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"uri":"package:unittest/src/utils.dart","name":"package:unittest/src/utils.dart","id":"utils","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Indent each line in [str] by two spaces. ","name":"indent","id":"indent1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"str","id":"str","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Return the escaped form of a character [ch]. ","name":"_escapeChar","isPrivate":true,"id":"_escapeChar1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"ch","id":"ch","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns [source] with any control characters replaced by their escape\nsequences.\n\nThis doesn't add quotes to the string, but it does escape single quote\ncharacters so that single quotes can be applied externally.\n","name":"escapeString","id":"escapeString1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"source","id":"source","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the name of the type of [x], or \"Unknown\" if the type name can't be\ndetermined.\n","name":"typeName","id":"typeName1()","children":[{"name":"x","id":"x","kind":"param"}],"line":"11","kind":"method"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A pair of values. ","name":"Pair","id":"Pair","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"60","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"62","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"67","kind":"property"},{"ref":{"refId":"utils/Pair/E","name":"E"},"name":"first","id":"first","line":"55","kind":"variable"},{"ref":{"refId":"utils/Pair/F","name":"F"},"name":"last","id":"last","line":"56","kind":"variable"},{"name":"","id":"2()","children":[{"initializedField":{"refId":"utils/Pair/first","name":"first"},"ref":{"refId":"utils/Pair/E","name":"E"},"name":"first","id":"first","kind":"param"},{"initializedField":{"refId":"utils/Pair/last","name":"last"},"ref":{"refId":"utils/Pair/F","name":"F"},"name":"last","id":"last","kind":"param"}],"line":"58","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"},{"name":"F","id":"F","kind":"typeparam"}],"line":"54","kind":"class"}],"line":"5","kind":"library"}