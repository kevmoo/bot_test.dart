{"dependencies":[{"id":"dart.core","uri":"file:///usr/local/Cellar/dart-editor/25630/dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25630/dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"id":"matcher","comment":"\nThe matcher library provides a 3rd generation assertion mechanism, drawing\ninspiration from [Hamcrest](http://code.google.com/p/hamcrest/).\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your `pubspec.yaml`\nfile.\n\n    dependencies:\n      unittest: any\n\nThen run `pub install`.\n\nImport this into your Dart code with:\n\n    import 'package:unittest/matcher.dart';\n\nFor more information, see the [unittest package on pub.dartlang.org].\n(http://pub.dartlang.org/packages/unittest).\n\n[pub]: http://pub.dartlang.org\n[pkg]: http://pub.dartlang.org/packages/matcher\n","uri":"package:unittest/matcher.dart","name":"package:unittest/matcher.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Matcher","comment":"\n[expect] Matchers must implement/extend the Matcher class.\nThe base Matcher class has a generic implementation of [describeMismatch]\nso this does not need to be provided unless a more clear description is\nrequired. The other two methods ([matches] and [describe])\nmust always be provided as they are highly matcher-specific.\n","uri":"package:unittest/src/interfaces.dart","name":"Matcher","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"matches2()","comment":"\nThis does the matching of the actual vs expected values.\n[item] is the actual value. [matchState] can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in [describeMismatch].\n","name":"matches","children":[{"id":"item","name":"item","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"id":"matchState","name":"matchState","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"matcher/Description","name":"Description"},"id":"describe1()","comment":"This builds a textual description of the matcher. ","name":"describe","children":[{"ref":{"refId":"matcher/Description","name":"Description"},"id":"description","name":"description","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"matcher/Description","name":"Description"},"id":"describeMismatch4()","comment":"\nThis builds a textual description of a specific mismatch. [item]\nis the value that was tested by [matches]; [matchState] is\nthe [Map] that was passed to and supplemented by [matches]\nwith additional information about the mismact, and [mismatchDescription]\nis the [Description] that is being built to decribe the mismatch.\nA few matchers make use of the [verbose] flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.\n","name":"describeMismatch","children":[{"id":"item","name":"item","kind":"param"},{"ref":{"refId":"matcher/Description","name":"Description"},"id":"mismatchDescription","name":"mismatchDescription","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"id":"matchState","name":"matchState","line":"80","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"verbose","name":"verbose","line":"80","kind":"param"}],"line":"79","kind":"method"},{"id":"0()","name":"","line":"56","kind":"constructor"}],"line":"55","kind":"class"},{"isAbstract":true,"superclass":{"refId":"matcher/Matcher","name":"Matcher"},"id":"TypeMatcher","uri":"package:unittest/src/core_matchers.dart","name":"TypeMatcher","children":[{"returnType":{"refId":"matcher/Description","name":"Description"},"id":"describe1()","name":"describe","children":[{"ref":{"refId":"matcher/Description","name":"Description"},"id":"description","name":"description","kind":"param"}],"line":"528","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"_name","name":"_name","isPrivate":true,"line":"526","kind":"variable"},{"id":"1()","name":"","children":[{"initializedField":{"refId":"matcher/TypeMatcher/_name","name":"_name"},"ref":{"refId":"dart.core/String","name":"String"},"id":"_name","name":"_name","isPrivate":true,"kind":"param"}],"line":"527","kind":"constructor"}],"line":"525","kind":"class"}],"line":"28","kind":"library"}],"id":"bot_test","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/bot_test.dart","children":[{"returnType":{"refId":"matcher/Matcher","name":"Matcher"},"id":"finishesWith1()","comment":"\nMatches a [Future] that completes succesfully with a value that matches\n[matcher]. Note that this creates an asynchronous expectation. The call to\n`expect()` that includes this will return immediately and execution will\ncontinue. Later, when the future completes, the actual expectation will run.\n\nTo test that a Future completes with an exception, you can use [throws] and\n[throwsA].\n\nUnlike [completion] in `unittest`, exceptions are registered directly with\nthe test framework. They are not wrapped.\n","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"finishesWith","children":[{"id":"matcher","name":"matcher","kind":"param"}],"line":"76","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"expectFutureComplete2()","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"expectFutureComplete","children":[{"ref":{"refId":"dart.async/Future","name":"Future"},"id":"future","name":"future","kind":"param"},{"ref":{"refId":"bot/Action1","name":"Action1"},"isOptional":true,"id":"onComplete","name":"onComplete","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"expectFutureFail2()","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"expectFutureFail","children":[{"ref":{"refId":"dart.async/Future","name":"Future"},"id":"future","name":"future","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onException","name":"onException","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"file:///usr/local/Cellar/dart-editor/25630/dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"error","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"error","line":"16","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"16","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"pending0()","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"pending","line":"3","kind":"method"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"id":"finishes","comment":"\nMatches a [Future] that completes successfully with a value. Note that this\ncreates an asynchronous expectation. The call to `expect()` that includes\nthis will return immediately and execution will continue. Later, when the\nfuture completes, the actual expectation will run.\n\nTo test that a Future completes with an exception, you can use [throws] and\n[throwsA].\n\nUnlike [completes] in `unittest`, exceptions are registered directly with\nthe test framework. They are not wrapped.\n","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"finishes","line":"62","kind":"variable"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"isFinal":true,"id":"throwsAssertionError","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"throwsAssertionError","line":"13","kind":"variable"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"isFinal":true,"id":"throwsNullArgumentError","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"throwsNullArgumentError","line":"10","kind":"variable"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"isFinal":true,"id":"throwsInvalidOperationError","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"throwsInvalidOperationError","line":"7","kind":"variable"},{"superclass":{"refId":"matcher/TypeMatcher","name":"TypeMatcher"},"id":"_NullArgumentError","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"_NullArgumentError","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"matches2()","name":"matches","children":[{"id":"item","name":"item","line":"133","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"id":"matchState","name":"matchState","line":"133","kind":"param"}],"line":"132","kind":"method"},{"id":"0()","name":"","line":"130","kind":"constructor"}],"line":"129","kind":"class"},{"superclass":{"refId":"matcher/TypeMatcher","name":"TypeMatcher"},"id":"_InvalidOperationError","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"_InvalidOperationError","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"matches2()","name":"matches","children":[{"id":"item","name":"item","line":"126","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"id":"matchState","name":"matchState","line":"126","kind":"param"}],"line":"125","kind":"method"},{"id":"0()","name":"","line":"123","kind":"constructor"}],"line":"122","kind":"class"},{"superclass":{"refId":"matcher/TypeMatcher","name":"TypeMatcher"},"id":"_StateErrorMatcher","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"_StateErrorMatcher","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"matches2()","name":"matches","children":[{"id":"item","name":"item","line":"119","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"id":"matchState","name":"matchState","line":"119","kind":"param"}],"line":"118","kind":"method"},{"id":"0()","name":"","line":"116","kind":"constructor"}],"line":"115","kind":"class"},{"superclass":{"refId":"matcher/TypeMatcher","name":"TypeMatcher"},"id":"_AssertionErrorMatcher","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"_AssertionErrorMatcher","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"matches2()","name":"matches","children":[{"id":"item","name":"item","line":"112","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"id":"matchState","name":"matchState","line":"112","kind":"param"}],"line":"111","kind":"method"},{"id":"0()","name":"","line":"109","kind":"constructor"}],"line":"108","kind":"class"},{"superclass":{"refId":"matcher/Matcher","name":"Matcher"},"id":"_Finishes","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/top_level.dart","name":"_Finishes","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"matches2()","name":"matches","children":[{"id":"item","name":"item","line":"84","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"id":"matchState","name":"matchState","line":"84","kind":"param"}],"line":"83","kind":"method"},{"returnType":{"refId":"matcher/Description","name":"Description"},"id":"describe1()","name":"describe","children":[{"ref":{"refId":"matcher/Description","name":"Description"},"id":"description","name":"description","line":"98","kind":"param"}],"line":"97","kind":"method"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"isFinal":true,"id":"_matcher","name":"_matcher","isPrivate":true,"line":"79","kind":"variable"},{"id":"1()","name":"","children":[{"initializedField":{"refId":"bot_test/_Finishes/_matcher","name":"_matcher"},"ref":{"refId":"matcher/Matcher","name":"Matcher"},"id":"_matcher","name":"_matcher","isPrivate":true,"kind":"param"}],"line":"81","kind":"constructor"}],"line":"78","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"EventWatcher","uri":"file:///Users/kevin/source/github/bot_test.dart/lib/src/bot_test/event_watcher.dart","name":"EventWatcher","children":[{"returnType":{"refId":"void","name":"void"},"id":"handler1()","name":"handler","children":[{"ref":{"refId":"bot_test/EventWatcher/T","name":"T"},"id":"args","name":"args","kind":"param"}],"line":"11","kind":"method"},{"ref":{"refId":"bot_test/EventWatcher/T","name":"T"},"id":"lastArgs","name":"lastArgs","line":"7","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"eventCount","name":"eventCount","line":"9","kind":"property"},{"ref":{"refId":"bot_test/EventWatcher/T","name":"T"},"id":"_lastArgs","name":"_lastArgs","isPrivate":true,"line":"4","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"_eventCount","name":"_eventCount","isPrivate":true,"line":"5","kind":"variable"},{"id":"T","name":"T","kind":"typeparam"}],"line":"3","kind":"class"}],"line":"1","kind":"library"}