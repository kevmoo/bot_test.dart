{"dependencies":[{"uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","id":"0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"comment":"\nThe matcher library provides a 3rd generation assertion mechanism, drawing\ninspiration from [Hamcrest](http://code.google.com/p/hamcrest/).\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your `pubspec.yaml`\nfile.\n\n    dependencies:\n      unittest: any\n\nThen run `pub install`.\n\nImport this into your Dart code with:\n\n    import 'package:unittest/matcher.dart';\n\nFor more information, see the [unittest package on pub.dartlang.org].\n(http://pub.dartlang.org/packages/unittest).\n\n[pub]: http://pub.dartlang.org\n[pkg]: http://pub.dartlang.org/packages/matcher\n","uri":"package:unittest/matcher.dart","name":"package:unittest/matcher.dart","id":"matcher","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\n[expect] Matchers must implement the Matcher class.\nThe base Matcher class that implements this interface has\na generic implementation of [describeMismatch] so this does\nnot need to be provided unless a more clear description is\nrequired. The other two methods ([matches] and [describe])\nmust always be provided as they are highly matcher-specific.\n","uri":"package:unittest/src/interfaces.dart","name":"Matcher","id":"Matcher","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nThis does the matching of the actual vs expected values.\n[item] is the actual value. [matchState] can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in [describeMismatch].\n","name":"matches","id":"matches2()","children":[{"name":"item","id":"item","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"matcher/Description","name":"Description"},"comment":"This builds a textual description of the matcher. ","name":"describe","id":"describe1()","children":[{"ref":{"refId":"matcher/Description","name":"Description"},"name":"description","id":"description","kind":"param"}],"line":"66","kind":"method"},{"returnType":{"refId":"matcher/Description","name":"Description"},"comment":"\nThis builds a textual description of a specific mismatch. [item]\nis the value that was tested by [matches]; [matchState] is\nthe [Map] that was passed to and supplemented by [matches]\nwith additional information about the mismact, and [mismatchDescription]\nis the [Description] that is being built to decribe the mismatch.\nA few matchers make use of the [verbose] flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.\n","name":"describeMismatch","id":"describeMismatch4()","children":[{"name":"item","id":"item","kind":"param"},{"ref":{"refId":"matcher/Description","name":"Description"},"name":"mismatchDescription","id":"mismatchDescription","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","line":"79","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"verbose","id":"verbose","line":"79","kind":"param"}],"line":"78","kind":"method"}],"line":"56","kind":"class"},{"isAbstract":true,"superclass":{"refId":"matcher/BaseMatcher","name":"BaseMatcher"},"uri":"package:unittest/src/core_matchers.dart","name":"TypeMatcher","id":"TypeMatcher","children":[{"returnType":{"refId":"matcher/Description","name":"Description"},"name":"describe","id":"describe1()","children":[{"ref":{"refId":"matcher/Description","name":"Description"},"name":"description","id":"description","kind":"param"}],"line":"520","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"_name","isPrivate":true,"id":"_name","line":"518","kind":"variable"},{"name":"","id":"1()","children":[{"initializedField":{"refId":"matcher/TypeMatcher/_name","name":"_name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"_name","isPrivate":true,"id":"_name","kind":"param"}],"line":"519","kind":"constructor"}],"line":"517","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"matcher/Matcher","name":"Matcher"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBaseMatcher is the base class for all matchers. To implement a new\nmatcher, either add a class that implements Matcher or a class that\nextends BaseMatcher. Extending BaseMatcher has the benefit that a\ndefault implementation of describeMismatch will be provided.\n","uri":"package:unittest/src/basematcher.dart","name":"BaseMatcher","id":"BaseMatcher","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nTests the matcher against a given [item]\nand return true if the match succeeds; false otherwise.\n[matchState] may be used to return additional info for\nthe use of [describeMismatch].\n","name":"matches","id":"matches2()","children":[{"name":"item","id":"item","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","kind":"param"}],"line":"22","kind":"method"},{"returnType":{"refId":"matcher/Description","name":"Description"},"comment":"\nCreates a textual description of a matcher,\nby appending to [mismatchDescription].\n","name":"describe","id":"describe1()","children":[{"ref":{"refId":"matcher/Description","name":"Description"},"name":"mismatchDescription","id":"mismatchDescription","kind":"param"}],"line":"28","kind":"method"},{"returnType":{"refId":"matcher/Description","name":"Description"},"comment":"\nGenerates a description of the matcher failed for a particular\n[item], by appending the description to [mismatchDescription].\nIt does not check whether the [item] fails the match, as it is\nonly called after a failed match. There may be additional info\nabout the mismatch in [matchState].\nThe base matcher does not add anything as the actual value is\ntypically sufficient, but matchers that can add valuable info\nshould override this.\n","name":"describeMismatch","id":"describeMismatch4()","children":[{"name":"item","id":"item","kind":"param"},{"ref":{"refId":"matcher/Description","name":"Description"},"name":"mismatchDescription","id":"mismatchDescription","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","line":"41","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"verbose","id":"verbose","line":"41","kind":"param"}],"line":"40","kind":"method"},{"name":"","id":"0()","line":"14","kind":"constructor"}],"line":"13","kind":"class"}],"line":"28","kind":"library"}],"uri":"file:///Users/kevin/source/github/bot.dart/lib/bot_test.dart","id":"bot_test","children":[{"returnType":{"refId":"matcher/Matcher","name":"Matcher"},"comment":"\nMatches a [Future] that completes succesfully with a value that matches\n[matcher]. Note that this creates an asynchronous expectation. The call to\n`expect()` that includes this will return immediately and execution will\ncontinue. Later, when the future completes, the actual expectation will run.\n\nTo test that a Future completes with an exception, you can use [throws] and\n[throwsA].\n\nUnlike [completion] in `unittest`, exceptions are registered directly with\nthe test framework. They are not wrapped.\n","uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"finishesWith","id":"finishesWith1()","children":[{"name":"matcher","id":"matcher","kind":"param"}],"line":"76","kind":"method"},{"returnType":{"refId":"void","name":"void"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"expectFutureComplete","id":"expectFutureComplete2()","children":[{"ref":{"refId":"dart.async/Future","name":"Future"},"name":"future","id":"future","kind":"param"},{"ref":{"refId":"bot/Action1","name":"Action1"},"isOptional":true,"name":"onComplete","id":"onComplete","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"void","name":"void"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"expectFutureFail","id":"expectFutureFail2()","children":[{"ref":{"refId":"dart.async/Future","name":"Future"},"name":"future","id":"future","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onException","id":"onException","children":[{"returnType":{"refId":"void","name":"void"},"uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"error","id":"error","line":"16","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"16","kind":"method"},{"returnType":{"refId":"void","name":"void"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"pending","id":"pending0()","line":"3","kind":"method"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"comment":"\nMatches a [Future] that completes successfully with a value. Note that this\ncreates an asynchronous expectation. The call to `expect()` that includes\nthis will return immediately and execution will continue. Later, when the\nfuture completes, the actual expectation will run.\n\nTo test that a Future completes with an exception, you can use [throws] and\n[throwsA].\n\nUnlike [completes] in `unittest`, exceptions are registered directly with\nthe test framework. They are not wrapped.\n","uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"finishes","id":"finishes","line":"62","kind":"variable"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"isFinal":true,"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"throwsAssertionError","id":"throwsAssertionError","line":"13","kind":"variable"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"isFinal":true,"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"throwsNullArgumentError","id":"throwsNullArgumentError","line":"10","kind":"variable"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"isFinal":true,"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"throwsInvalidOperationError","id":"throwsInvalidOperationError","line":"7","kind":"variable"},{"superclass":{"refId":"matcher/TypeMatcher","name":"TypeMatcher"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"_NullArgumentError","isPrivate":true,"id":"_NullArgumentError","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"matches","id":"matches2()","children":[{"name":"item","id":"item","line":"133","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","line":"133","kind":"param"}],"line":"132","kind":"method"},{"name":"","id":"0()","line":"130","kind":"constructor"}],"line":"129","kind":"class"},{"superclass":{"refId":"matcher/TypeMatcher","name":"TypeMatcher"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"_InvalidOperationError","isPrivate":true,"id":"_InvalidOperationError","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"matches","id":"matches2()","children":[{"name":"item","id":"item","line":"126","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","line":"126","kind":"param"}],"line":"125","kind":"method"},{"name":"","id":"0()","line":"123","kind":"constructor"}],"line":"122","kind":"class"},{"superclass":{"refId":"matcher/TypeMatcher","name":"TypeMatcher"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"_StateErrorMatcher","isPrivate":true,"id":"_StateErrorMatcher","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"matches","id":"matches2()","children":[{"name":"item","id":"item","line":"119","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","line":"119","kind":"param"}],"line":"118","kind":"method"},{"name":"","id":"0()","line":"116","kind":"constructor"}],"line":"115","kind":"class"},{"superclass":{"refId":"matcher/TypeMatcher","name":"TypeMatcher"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"_AssertionErrorMatcher","isPrivate":true,"id":"_AssertionErrorMatcher","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"matches","id":"matches2()","children":[{"name":"item","id":"item","line":"112","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","line":"112","kind":"param"}],"line":"111","kind":"method"},{"name":"","id":"0()","line":"109","kind":"constructor"}],"line":"108","kind":"class"},{"superclass":{"refId":"matcher/BaseMatcher","name":"BaseMatcher"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/top_level.dart","name":"_Finishes","isPrivate":true,"id":"_Finishes","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"matches","id":"matches2()","children":[{"name":"item","id":"item","line":"84","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"matchState","id":"matchState","line":"84","kind":"param"}],"line":"83","kind":"method"},{"returnType":{"refId":"matcher/Description","name":"Description"},"name":"describe","id":"describe1()","children":[{"ref":{"refId":"matcher/Description","name":"Description"},"name":"description","id":"description","line":"98","kind":"param"}],"line":"97","kind":"method"},{"ref":{"refId":"matcher/Matcher","name":"Matcher"},"isFinal":true,"name":"_matcher","isPrivate":true,"id":"_matcher","line":"79","kind":"variable"},{"name":"","id":"1()","children":[{"initializedField":{"refId":"bot_test/_Finishes/_matcher","name":"_matcher"},"ref":{"refId":"matcher/Matcher","name":"Matcher"},"name":"_matcher","isPrivate":true,"id":"_matcher","kind":"param"}],"line":"81","kind":"constructor"}],"line":"78","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"file:///Users/kevin/source/github/bot.dart/lib/src/bot_test/event_watcher.dart","name":"EventWatcher","id":"EventWatcher","children":[{"returnType":{"refId":"void","name":"void"},"name":"handler","id":"handler1()","children":[{"ref":{"refId":"bot_test/EventWatcher/T","name":"T"},"name":"args","id":"args","kind":"param"}],"line":"11","kind":"method"},{"ref":{"refId":"bot_test/EventWatcher/T","name":"T"},"name":"lastArgs","id":"lastArgs","line":"7","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"eventCount","id":"eventCount","line":"9","kind":"property"},{"ref":{"refId":"bot_test/EventWatcher/T","name":"T"},"name":"_lastArgs","isPrivate":true,"id":"_lastArgs","line":"4","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_eventCount","isPrivate":true,"id":"_eventCount","line":"5","kind":"variable"},{"name":"T","id":"T","kind":"typeparam"}],"line":"3","kind":"class"}],"line":"1","kind":"library"}